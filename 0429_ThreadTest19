package kr.or.ddit.basic;

import java.util.function.Consumer;

public class ThreadTest19 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		DataBox databox = new DataBox();
		
		ProducerThread th1 = new ProducerThread(databox);
		ConsumerThread th2 = new ConsumerThread(databox);
		
		th1.start();
		th2.start();
	}

}


//데이터를 넣어주는 스레드
class ProducerThread extends Thread{
	private DataBox databox;

	public ProducerThread(DataBox databox) {
		super();
		this.databox = databox;
	}
	
	@Override
	public void run() {
		for(int i = 1; i <= 3; i++) {
			databox.setData("공급 데이터 " + i);
		}
	}
}


//데이터를 꺼내서 사용하는 스레드
class ConsumerThread extends Thread{
	private DataBox databox;

	public ConsumerThread(DataBox databox) {
		this.databox = databox;
	}
	
	@Override
	public void run() {
		for(int i = 1; i <= 3; i++) {
			String temp = databox.getData(); //출력을 따로 하지 않겠다. 왜냐하면 스레드가 읽은 데이터라고 아래에서 출력 해주니까.
		}
	}
}


//공통 객체
class DataBox{
	private String data;
	
	//data 값이 null이면 data 변수에 문자열이 채워질 때까지 기다리고,
	//data 값이 있으면 해당 문자열을 반환하고, 반환 후에는 data 값을 null로 만든다.
	public synchronized String getData() {
		if(data == null) {
			try {
				wait();
			} catch (InterruptedException e) {
				// TODO: handle exception
			}
		}
		
		String temp = data;
		System.out.println("스레드가 읽은 데이터 : " + temp);
		data = null;
		notify();
		
		return temp;
	}
	
	
	//data 변수에 값이 있으면 data 변수값이 null이 될 때까지 기다리고,
	//data 변수 값이 null이 되면 새로운 data 값을 저장한다.
	public synchronized void setData(String data) {
		if(this.data != null) {
			try {
				wait();
			} catch (InterruptedException e) {
				// TODO: handle exception
			}
		}
		
		this.data = data; //데이터 저장
		System.out.println("Thread에서 새로 저장한 데이터 : " + data);
		notify();
	}
	
}
