package kr.or.ddit.basic;

import java.util.ArrayList;
import java.util.Collections;

public class ListSortTest02 {

	public static void main(String[] args) {
		ArrayList<Member> memList = new ArrayList<Member>();
		
		memList.add(new Member(1, "홍길동", "010-1111-1111"));
		memList.add(new Member(5, "이순신", "010-2222-1111"));
		memList.add(new Member(9, "성춘향", "010-3333-1111"));
		memList.add(new Member(3, "강감찬", "010-4444-1111"));
		memList.add(new Member(6, "일지매", "010-5555-1111"));
		memList.add(new Member(2, "변학도", "010-6666-1111"));
		
		System.out.println("정렬전...");
		for(Member mem : memList) {
			System.out.println(mem);
		}
		System.out.println("-----------------------------------");
		
		Collections.sort(memList);
		
		System.out.println("정렬 후...");
		for (Member mem : memList) {
			System.out.println(mem);
		}
		System.out.println("-----------------------------------");
		
	}

}



//회원 관리를 위한 Member 클래스 작성하기
//회원 번호의 오름차순으로 정렬될 수 있는 내부 정렬 기준을 추가해서 작성

class Member implements Comparable<Member> { //compartTo를 재정의 하지 않으면 1차적으로 implements 쓰고나서 오류발생
	private int num; //회원번호
	private String name; //회원이름
	private String tel; //전화번호
	
	//생성자 자동 생성 : alt + shift + s -> generate using fields ...
	public Member(int num, String name, String tel) {
		super();
		this.num = num;
		this.name = name;
		this.tel = tel;
	}

	public int getNum() {
		return num;
	}

	public void setNum(int num) {
		this.num = num;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getTel() {
		return tel;
	}

	public void setTel(String tel) {
		this.tel = tel;
	}

	@Override
	public String toString() {
		return "Member [num=" + num + ", name=" + name + ", tel=" + tel + "]";
	}

	//회원 번호의 오름차순
//	@Override
//	public int compareTo(Member mem) {
//		if(this.getNum() > mem.getNum()) {
//			return 1;
//		}else if(this.getNum() < mem.getNum()) {
//			return -1;
//		}
//		return 0;
//	}@Override
	
	
	//회원 이름의 오름차순으로 정렬될 수 있는 외부 정렬 기준 클래스를 작성하시오
	//클래스명 : SortNameAsc
	@Override
	public int compareTo(Member mem) {
		if(this.getNum() > mem.getNum()) {
			return -1;
		}else if(this.getNum() < mem.getNum()) {
			return 1;
		}
		return 0;
	}
	
}
