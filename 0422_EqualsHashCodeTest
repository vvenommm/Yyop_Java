package kr.or.ddit.basic;

import java.util.HashSet;

public class EqualsHashCodeTest {

	public static void main(String[] args) {
		Person p1 = new Person();
		p1.setId(1);
		p1.setName("홍길동");
		
		Person p2 = new Person();
		p2.setId(2);
		p2.setName("일지매");
		
		Person p3 = p1;
		
		//객체 비교는 equals로 비교 그러나 sysout ==으로 해도 false가 나옴
		System.out.println("== -> " + (p1 == p2)); 
		System.out.println("equals -> " + p1.equals(p2));
		
		
		System.out.println("\n=================================\n");
		
		
//		p2.setId(1);
//		p2.setName("홍길동");
		
		System.out.println("p2에 p1과 같은 값을 넣은 후");
		System.out.println("== -> " + (p1 == p2));  //equals는 object에 있는 메소드
		System.out.println("equals -> " + p1.equals(p2)); //이렇게 해도 false가 나옴 왜?
		
		
		System.out.println("\n=================================\n");
		
		
		System.out.println("p3에 p1 객체 자체를 넣은 후");
		System.out.println("== -> " + (p1 == p3));  //equals는 object에 있는 메소드
		System.out.println("equals -> " + p1.equals(p3)); //이렇게 해도 false가 나옴 왜?
		
		
		System.out.println("\n=================================\n");

		
		HashSet<Person> testSet = new HashSet<Person>();
		
		testSet.add(p1);
		testSet.add(p2);
		
		System.out.println("p1, p2 추가한 testSet의 size = " + testSet.size());

		
		System.out.println("\n=================================\n");
		
		
		testSet.add(p3);
		
		System.out.println("p1, p2, p3 추가한 testSet의 size = " + testSet.size());
		
		
		System.out.println("\n=================================\n");
		
		System.out.println("p1과 p3의 hashCode가 같다.");
		System.out.println("p1 hashCode : " + p1.hashCode());
		System.out.println("p2 hashCode : " + p2.hashCode());
		System.out.println("p3 hashCode : " + p3.hashCode());
		
		/*
			- equals() 메소드 : 두 객체의 내용이 같은지 검사하는 연산자 메소드
			- hashCode() 메소드 : 두 객체의 동일성 여부를 검사하는 연산자 메소드
			
			- HashSet, Hashtable, HashMap과 같이 Hash로 시작하는 컬렉션 객체들은
			  의미상의 동일성을 비교하기 위해 hashCode() 메소드를 호출해서 비교
			  그러므로, 객체가 같은지 여부를 결정하려면 equals() 메소드와 hashCode() 메소드를 재정의 해야한다.
			  
			  단순히 참조값만 같으면 될 때엔 굳이 재정의까지 하지 않아도 됨
		 */
		
		
		
	}

}


class Person{
	private int id;
	private String name;
	
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + id;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Person other = (Person) obj;
		if (id != other.id)
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}
	
	
	
	//우리가 만든 재정의
//	@Override
//	public boolean equals(Object obj) {
//		if(this == obj) return true;
//		if(obj == null) return false;
//		
//		//같은 유형의 클래스인지 검사
//		if(this.getClass() != obj.getClass()) { //참이면 완전히 다른 객체라는 뜻
//			return false;
//		}
//		
//		//매개변수의 값을 현재 객체 유형으로 형변환
//		Person that = (Person) obj;
//		
//		if(this.name == null && that.name != null) {
//			return false;
//		}
//		
//		if(this.id == that.id && this.name == that.name) { //name이 둘 다 null일 경우를 대비하여 비교
//			return true;
//		}
//		
//		if(this.id == that.id && this.name.contentEquals(that.name)) {
//			return true;
//		}
//		
//		return false; //위의 조건들 빼고 나머지는 다 false
//	}
	
}
