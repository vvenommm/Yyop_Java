package kr.or.ddit.basic;

public class ThreadTest01 {

	public static void main(String[] args) {
		// 싱글스레드 프로그램 => * 2--개, $ 200개
		
		for(int i = 1; i <= 200; i++) {
			System.out.print("*");
		}

		System.out.println();
		
		for(int i = 1; i <= 200; i++) {
			System.out.print("$");
		}

	}

}

//위와 아래는 다른 파일인데 
///////////////////////////////////////////////////////////////////////



package kr.or.ddit.basic;

public class ThreadTest02 {

	public static void main(String[] args) {
		// 멀티 스레드 프로그램
		
		// Thread를 사용하는 방법
		
		/*
			방법 1 : Thread클래스를 상속하는 방법
			Thread 클래스를 상속한 class를 작성한 후 이 class의 인스턴스를 생성한다.
			이 인스턴스의 start() 메소드를 호출해서 실행한다.
		 */
		
		MyThread1 th1 = new MyThread1(); //인스턴스 생성
		th1.start();
		
		/*
			방법 2 : Runnable 인터페이스를 구현하는 방법
			Runnable 인터페이스를 구현한 class를 작성한 수 이 class의 인스턴스를 생성한다.
			실행할 Thread 객체를 생성하는데 이 때 Thread 객체의 생성자에 Runnable을 구현한 class의 인스턴스를 인수 값으로 넣어준다.
			이때 생성된 Thread 객체의 start() 메소드를 호출해서 실행한다.
		 */
		
		MyThread2 r = new MyThread2(); //인스턴스 생성
		Thread th2 = new Thread(r); //Thread 객체 생성
		th2.start();
		
		//start는 스레드가 실행될 환경을 만들어줌. start 메소드 안에 run을 호출하는 명령어가 있음
		
		System.out.println("메인 메소드 끝!");
		//멀티 스레드 프로그램은 메인 뿐만 아니라 다른 스레드의 run() 메소드도 끝나야 끝남

		//방법2-2 : 익명구현체(interface)를 이용하는 방법
		Runnable r2 = new Runnable() {
			
			@Override
			public void run() {
				for(int i = 1; i <= 200; i++) {
					System.out.print("@");
					try {
						Thread.sleep(100);
					}catch (InterruptedException e) {
						// TODO: handle exception
					}
				}
			}
			
		};
		Thread th3 = new Thread(r2);
		th3.start();
		
	}

}


//방법 1에 해당하는 class 작성
class MyThread1 extends Thread{
	//run 메소드를 재정의 한다.
	@Override
	public void run() {
		//이 run() 메소드는 스레드가 처리할 내용을 기술하는 영역이다.
		
		for(int i = 1; i <= 200; i++) {
			System.out.print("*");
			try {
				//Thread.sleep(시간) -> 주어진 '시간'동안 작업을 잠시 멈춘다. '시간'은 밀리세컨드 단위를 사용. 즉 1초 = 1000
				Thread.sleep(100);
			}catch (InterruptedException e) {
				// TODO: handle exception
			}
		}

	}
}


//방법 2에 해당하는 class 작성
class MyThread2 implements Runnable{
	
	//run() 메소드 재정의
	@Override
	public void run() {
		for(int i = 1; i <= 200; i++) {
			System.out.print("$");
			try {
				Thread.sleep(100);
			}catch (InterruptedException e) {
				// TODO: handle exception
			}
		}
	}
}


