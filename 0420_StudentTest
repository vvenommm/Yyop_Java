package kr.or.ddit.basic;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class StudentTest {
	
	/*
	
	문제) 학번(int), 이름(String), 국어점수, 영어점수, 수학점수, 총점, 등수(모두 int)를 멤버로 갖는
   Student클래스를 만든다.
   이 클래스의 생성자에서는 학번, 이름, 국어점수, 영어점수, 수학점수만 매개변수로 받아서 초기화 한다.
   (이 때 총점은 세 과목의 점수를 이용해서 초기화 한다.)
      
   이 Student객체는 List에 저장하여 관리한다.
      
   List에 저장된 데이터들을 학번의 오름차순으로 정렬할 수 있는 내부 정렬기준을 구현하고,
   총점의 역순으로 정렬하는데 총점이 같으면 이름의 내림차순으로 정렬되는 외부 정렬 기준 클래스를 작성하여
   정렬된 결과를 출력하시오.
      
   (단, 등수는 List에 전체 데이터가 추가 된 후에 저장되도록 한다.)
   
	 */

	public static void main(String[] args) {
		ArrayList<Student> stuList = new ArrayList<Student>();
		
		stuList.add(new Student((int)(Math.random()*26), "이정후", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "은주영", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "박다혜", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "이다솜", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "이다솜", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "이가은", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "이상학", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "신현국", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "김은태", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "황명성", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "이재원", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "문승제", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "권흥종", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "이규범", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "안은실", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "이희경", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "오세영", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "김민정", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "최민정", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "전윤미", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "김수원", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "이소정", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "임정은", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "최지은", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		stuList.add(new Student((int)(Math.random()*26), "최지연", (int)(Math.random()*101), (int)(Math.random()*101), (int)(Math.random()*101)));
		
		
		//등수 구하기
		for (Student s1 : stuList) {
			for (Student s2 : stuList) {
			if(s1.getTotal() < s2.getTotal()) {
				s1.setRank(s1.getRank()+1);
			}
			}
		}
		
		
		
		System.out.println("정렬 전...");
		for(Student student : stuList) {
			System.out.println(student.toString());
		}
		System.out.println("-----------------------------------");

		System.out.println("내부 정렬 후...");
		Collections.sort(stuList);
		for(Student student : stuList) {
			System.out.println(student.toString());
		}
		
		System.out.println("-----------------------------------");
				Collections.sort(stuList, new totalAsc());
		
		System.out.println("외부 정렬 후...");
		for (Student student : stuList) {
			System.out.println(student.toString());
		}
		System.out.println("-----------------------------------");

	}

}


class Student implements Comparable<Student>{
	
	private int stuNum; //학번
	private String name; //이름
	private int kor; //국어
	private int eng; //영어
	private int math; //수학
	private int total; //과목 총점
	private int rank; //등수
	
	

	public Student(int stuNum, String name, int kor, int eng, int math) {
		super();
		this.stuNum = stuNum;
		this.name = name;
		this.kor = kor;
		this.eng = eng;
		this.math = math;
		this.total = kor + eng + math;
		this.rank = 1;
	}



	@Override
	public int compareTo(Student s) {
		// TODO 학번의 오름차순으로 정렬할 내부 정렬 기준
		if(this.getStuNum() < s.getStuNum()) {
			return -1;
		}else if(this.getStuNum() > s.getStuNum()) {
			return 1;
		}else {
			return 0;
		}
	}



	public int getStuNum() {
		return stuNum;
	}



	public void setStuNum(int stuNum) {
		this.stuNum = stuNum;
	}



	public String getName() {
		return name;
	}



	public void setName(String name) {
		this.name = name;
	}



	public int getKor() {
		return kor;
	}



	public void setKor(int kor) {
		this.kor = kor;
	}



	public int getEng() {
		return eng;
	}



	public void setEng(int eng) {
		this.eng = eng;
	}



	public int getMath() {
		return math;
	}



	public void setMath(int math) {
		this.math = math;
	}



	public int getTotal() {
		return total;
	}



	public void setTotal(int total) {
		this.total = total;
	}



	public int getRank() {
		return rank;
	}



	public void setRank(int rank) {
		this.rank = rank;
	}



	@Override
	public String toString() {
		return "Student [stuNum=" + stuNum + ", name=" + name + ", kor=" + kor + ", eng=" + eng + ", math=" + math
				+ ", total=" + total + ", rank=" + rank + "]";
	}
	
	
}


class totalAsc implements Comparator<Student>{

	@Override
	public int compare(Student s1, Student s2) {
		// TODO 총점의 역순으로 정렬, 총점이 같으면 이름의 내림차순으로 정렬
		if(s1.getTotal() > s2.getTotal()) {
			return -1;
		}else if(s1.getTotal() < s2.getTotal()) {
			return 1;
		}else {
			if(s1.getName().compareTo(s2.getName()) > 0) {
				return 1;
			}
			return 0;
		}
	}
	
}
