package kr.or.ddit.basic;

/*
	은행의 입출금을 스레드로 처리하는 예지
 */

public class ThreadTest16 {

	
	private int balance; //잔액이 저장될 변수
	
	public int getBalance() {
		return balance;
	}

	public void setBalance(int balance) {
		this.balance = balance;
	}

	//입금하는 메소드
	public void deposit(int money) {
		balance += money;
	}
	
	//출금하는 메소드(반환값 -> 출금성공 = true, 출금실패 = false)
	public synchronized boolean withdraw(int money) {
		if(balance >= money) {
			for (int i = 1; i <= 10_000_000; i++); //공회전 : 다른 스레드가 개입할 여지를 주기 위해
				balance -= money;
				System.out.println("메소드 안에서 balance = " + balance);
				return true;
		}else {
			return false;
		}
	}
	/* 혹은 이렇게 해도 됨
		public boolean withdraw(int money) {
			synchronized(this){
			if(balance >= money) {
				for (int i = 1; i <= 10_000_000; i++); //공회전 : 다른 스레드가 개입할 여지를 주기 위해
					balance -= money;
					System.out.println("메소드 안에서 balance = " + balance);
					return true;
			}else {
			return false;
			}
		}
	}
	 */


	public static void main(String[] args) {
		ThreadTest16 account = new ThreadTest16();
		account.setBalance(10000); //잔액 100000원으로 설정
		
		//익명 구현체로 스레드 구현
		Runnable r = new Runnable() {
			@Override
			public void run() {
				boolean result = account.withdraw(6000);
				System.out.println("스레드에서 result = " + result + ", balance = " + account.getBalance());
			}
		};
		
		Thread th1 = new Thread(r);
		Thread th2 = new Thread(r);
		
		th1.start();
		th2.start();
		
		
	}

}
