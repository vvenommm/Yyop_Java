package kr.or.ddit.basic;

import java.util.Vector;

public class VectorTest {

	public static void main(String[] args) {
		//Collection 객체들은 객체만 저장할 수 있다.
		
		//Vector ==> 자바 초창기부터 지원하는 객체, 동기화 처리가 되어 있다.
		// 객체 생성
		Vector v1 = new Vector();
		System.out.println("size : " + v1);
		
		
		System.out.println("\n============================\n");
		
		
		/*
		데이터 추가하기 : add(추가할 데이터)
		-> 반환값 : 추가 성공 : true / 추가 실패 : false
		*/
		
		v1.add("aaaaa");
		v1.add(new Integer(111)); //예전에는 이렇게 객체를 변환해주는 방법을 사용해서 써줘야 했다.
		v1.add(123); //오토 박싱이 일어남
		v1.add('a');
		v1.add(true);
		v1.add(123.45);
		boolean r = v1.add(123.45);
		System.out.println("추가 후 size : " + v1);
		System.out.println("반환값 : " + r);
		

		System.out.println("\n============================\n");
		
		
		/*
		데이터 추가하기 2 : addElement(추가할 데이터)
		-> 이전 버전의 프로그램도 사용할 수 있도록 하기 위해 남아 있는 메소드
		*/
		v1.addElement("CCC");
		
		System.out.println("v1 => " + v1.toString());
		System.out.println("v1 => " + v1);
		
		
		System.out.println("\n============================\n");
		
		
		/*
		데이터 추가하기 3 : add(index, 데이터);
		-> index번 째에 '데이터'를 끼워 넣는다. -> 기존 데이터들이 뒤로 밀려남
		-> index는 0부터 시작
		-> 반환값은 없다.
		*/
		v1.add(1, "kkk");
		System.out.println("v1 => " + v1);

		
		System.out.println("\n============================\n");
		
		
		/*
		데이터 꺼내오기 : get(index)
		-> index번 째의 데이터를 꺼내서 반환
		*/
		int data = (int)v1.get(2); //오토 언박싱 작업이 이루어짐
		System.out.println("꺼내온 데이터 : " + data);
		

		System.out.println("\n============================\n");
		
		
		/*
		 * 데이터 수정하기 : set(index, 새로운 데이터)
		 * -> idx번 째의 데이터를 새로운 데이터로 바꿔치기
		 * -> 반환값 : 변경되기 전의 원래 데이터
		 */
		String temp = (String)v1.set(0, "zzzz");
		System.out.println("v1 => " + v1);
		System.out.println("원래의 데이터 : " + temp);
		

		System.out.println("\n============================\n");
		
		
		/*
		 * 데이터 삭제하기1 : remove(index)
		 * -> idx번 째의 데이터를 삭제
		 * -> 반환값 : 삭제된 데이터
		 */
		String temp2 = (String)v1.remove(0);
		
		System.out.println("삭제 후 v1 : " + v1);
		System.out.println("삭제된 데이터 : " + temp2);
	
	
		System.out.println("\n============================\n");

		
		/*
		 * 데이터 삭제하기2 : remove(삭제할 데이터)
		 * -> '삭제할 데이터'를 찾아서 삭제
		 * -> '삭제할 데이터'가 여러 개이면 앞에서부터 삭제
		 * -> 반환값 : 삭제 성공 true / 삭제 실패 false
		 */
		v1.remove("CCC");
		System.out.println("삭제 후 v1 : " + v1);
		
//		v1.remove(new Integer(123));
		v1.remove(Integer.valueOf(123));
		System.out.println("삭제 후 v1 : " + v1);

		
		//v1.remove('a'); : a를 아스키 문자 값으로 변환해서 결국 인덱스를 입력한 것과 같게 보기에 삭제되지 않음
		v1.remove(new Character('a')); // 이렇게 하거나 (Object)로 형변환 하거나
		
		
		
		System.out.println("\n============================\n");
		
		
		/*
		제네릭 타입(Generic Type)
		클래스 내부에서 사용할 데이터의 타입을 외부에서 지정하는 기법으로 객체를 선언할 때 <> 괄호 안에 그 객체의 내부에서 사용할 데이터의 타입을 정해주는 것
		이런 식으로 선언하게 되면 지정한 데이터 타입 이외의 다른 종류의 데이터를 저장할 수 없음
		이 때 제네릭으로 선언될 수 있는 데이터 타입은 클래스형이어야 함
		그래서, int는 Integer, boolean은 Boolean, char는 Character등으로 대체 해서 사용
		
		제네릭 타입으로 선언하게 되면 데이터를 꺼내올 때 별도의 형변환인 필요 없음
		 */
		Vector<String> v2 = new Vector<String>(); //String만 저장할 수 있는 벡터
		Vector<Integer> v3 = new Vector<>(); //int형만 저장할 수 있는 벡터
		
		v2.add("안녕하세요");
		//v2.add(100); //오류 : 다른 종류의 데이터 저장 불가
		
		String temp3 = v2.get(0); //데이터를 꺼내올 때 형변환 필요 없음
		System.out.println("temp3 : " + temp3);
		
	
		System.out.println("\n============================\n");

		
		//전체 데이터 삭제하기
		v2.clear();
		System.out.println("v2의 size : " + v2.size());

		
		System.out.println("\n============================\n");
		
		
		v2.add("AAAA");
		v2.add("BBBB");
		v2.add("CCCC");
		v2.add("DDDD");
		v2.add("EEEE");
		
		Vector<String> v4 = new Vector<>();
		v4.add("BBBB");
		v4.add("EEEE");
		
		System.out.println("v2 : " + v2);
		System.out.println("v4 : " + v4);
		
		
		/*
		데이터 삭제하기 : removaAll(Collection 객체)
		-> 현재 벡터에 있는 데이터 중에서 'Collection 객체'가 갖고 있는 데이터 모두를 삭제
		-> 반환값 : 삭제성공(true) / 삭제실패(false)
		*/
		v2.removeAll(v4); //v2에 있는 데이터 중 v4에 있는 데이터를 모두 삭제
		
		System.out.println("v2 : " + v2);

		
		System.out.println("\n============================\n");
	
		
		v2.clear();
		v2.add("AAAA");
		v2.add("BBBB");
		v2.add("CCCC");
		v2.add("DDDD");
		v2.add("EEEE");
		
		
		//벡터의 데이터를 순서대로 모두 가져와 사용하고 싶을 때 반복문 사용 (주로  for문)
		for(int i = 0; i < v2.size(); i++) {
			System.out.println(i + "번 째 데이터 : " + v2.get(i));
		}
		
	
		System.out.println("\n============================\n");

		
		//향상된 for문
		for(String str : v2) {
			System.out.println(str);
		}
	
		
	}

}
